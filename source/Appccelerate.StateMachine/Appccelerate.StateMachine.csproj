<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
    <Version>6.0.0</Version>
  </PropertyGroup>
  
  <PropertyGroup>
    <Title>Appccelerate.StateMachine</Title>
    <Copyright>Copyright ©  2008-2019</Copyright>
    <Authors>Appccelerate team</Authors>
    <Company>Appccelerate</Company>
    <Product>Appccelerate</Product>
  </PropertyGroup>
  
  <!-- nuget package -->
  <ItemGroup>
      <None Include="..\nuget.png" Pack="true" PackagePath="\" />
  </ItemGroup>
  <PropertyGroup>
    <PackageRequireLicenseAcceptance>False</PackageRequireLicenseAcceptance>
    <PackageLicenseFile>LICENSE</PackageLicenseFile>
    <RepositoryUrl>https://github.com/appccelerate/statemachine</RepositoryUrl>
    <description>
      Hierarchical state machine with fluent definition syntax
      Features:
      states and events can be defined with enums, strings or ints - resulting in single class state machines,
      actions on transitions, entry and exit actions, transition guards,
      hierarchical with different history behaviors to initialize state always to same state or last active state,
      fluent definition interface,
      synchronous/asynchronous state machine (passive state machine handles state transitions synchronously, active state machine handles state transitions asynchronously on the worker thread of the state machine),
      extensible thorough logging,
      state machine report for description of state machine (csv, yEd)
    </description>
    <PackageReleaseNotes>
      6.0.0:
      - switched target to netstandard2.0 due to security vulnerabilities
      5.1.0:
      - completely redesigned the state machine definition API.
        You can now define a state machine definition and then spawn state machine instances from the definition.
        This speeds up creation of state machines from a static definition for example in ASP.NET requests.
        The initial state is set at definition time (on the definition) and not on the state machine anymore.
        The interfaces of the extensions had to be changed, too.
        For details see https://github.com/appccelerate/statemachine/pull/51, https://github.com/appccelerate/statemachine/pull/52 and https://github.com/appccelerate/statemachine/pull/53
      - Loading and saving the state machinbe now includes the queued events. The whole internal state holding was redesigned to be in a single place. Details see https://github.com/appccelerate/statemachine/pull/53
      - fixed that Fire on AsyncActiveStateMachine could not complete on blocking ExecuteOnEntry. Details see https://github.com/appccelerate/statemachine/pull/49
      - changed release pipeline of Appccelerate.StateMachine and lots of internal stuff

      4.4.0:
      - back to .net standard 1.0
      - fixed nuget package containing wrong assembly

      4.0.0:
      - adds AsyncPassiveStateMachine that supports async/await for transition actions, entry/exit actions, guards and save/load.
      - targets .net standard 1.3 to support async/await

      3.3.0:
      - fixed: wrong target framework was specified in nuget package. Now targets .net standard 1.0

      3.2.0:
      - targets now .net standard 1.0 so you can use the state machine almost anywhere .net exists
      - fixed a bug when passing a 'null' argument to the state machine
    </PackageReleaseNotes>
    <PackageTags>Appccelerate state-machine</PackageTags>
  </PropertyGroup>

  <!-- nuget symbol package -->
  <PropertyGroup>
    <IncludeSymbols>true</IncludeSymbols>
    <SymbolPackageFormat>snupkg</SymbolPackageFormat>
  </PropertyGroup>

  <!-- strong name signing -->
  <PropertyGroup>
    <SignAssembly>True</SignAssembly>
    <AssemblyOriginatorKeyFile>Appccelerate.snk</AssemblyOriginatorKeyFile>
    <DelaySign>False</DelaySign>
  </PropertyGroup>

  <!-- Stylecop / Analyzers -->
  <PropertyGroup>
    <CodeAnalysisRuleSet>../Analyzers.Productive.ruleset</CodeAnalysisRuleSet>
  </PropertyGroup>
  <ItemGroup>
    <None Remove="stylecop.json" />
  </ItemGroup>
  <ItemGroup>
    <AdditionalFiles Include="stylecop.json" />
  </ItemGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
    <NoWarn>$(NoWarn),SA0001</NoWarn>
  </PropertyGroup>

  <!-- license -->
  <ItemGroup>
    <None Include="..\..\LICENSE" Pack="true" PackagePath="" />
  </ItemGroup>
  <ItemGroup>
    <Folder Include="Machine\Reports\" />
  </ItemGroup>

  <!-- xml documentation file generation -->
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|AnyCPU'">
    <DocumentationFile>bin\$(Configuration)\$(TargetFramework)\$(AssemblyName).xml</DocumentationFile>
  </PropertyGroup>
  
  <Import Project="..\Appccelerate.StateMachine.props" />

</Project>